// Imports
const restify = require('restify')
const cors = require('restify-cors-middleware')
const mongoose = require('mongoose')
const helmet = require('helmet-csp')
const env = require('dotenv')
env.config()
const routes = require('./routes')

// Initializing the server
const server = restify.createServer({
  name: '<%= props.name %> api',
  version: '0.0.1'
})

// Config DB
mongoose.connect('put your uri here', {
  useNewUrlParser: true }, () => console.log('connected to DB!')
)

// Configs
server.use(restify.plugins.acceptParser(server.acceptable))
server.use(restify.plugins.queryParser())
server.use(restify.plugins.bodyParser())
const corsConfig = cors({
  origins: ['*'],
  allowHeaders: ['Authorization'],
  exposeHeaders: ['Authorization']
})
server.pre(corsConfig.preflight)
server.use(corsConfig.actual)
server.use(helmet({ // please read and set as you want
  // directives: {
  //   defaultSrc: ["'self'", 'default.com'],
  //   scriptSrc: ["'self'", "'unsafe-inline'"],
  //   styleSrc: ['style.com'],
  //   fontSrc: ["'self'", 'fonts.com'],
  //   imgSrc: ['img.com', 'data:'],
  //   sandbox: ['allow-forms', 'allow-scripts'],
  //   reportUri: '/report-violation',
  //   objectSrc: ["'none'"],
  //   upgradeInsecureRequests: true,
  //   workerSrc: false  // This is not set.
  // },

  // This module will detect common mistakes in your directives and throw errors
  // if it finds any. To disable this, enable "loose mode".
  loose: false,

  // Set to true if you only want browsers to report errors, not block them.
  // You may also set this to a function(req, res) in order to decide dynamically
  // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.
  reportOnly: false,

  // Set to true if you want to blindly set all headers: Content-Security-Policy,
  // X-WebKit-CSP, and X-Content-Security-Policy.
  setAllHeaders: false,

  // Set to true if you want to disable CSP on Android where it can be buggy.
  disableAndroid: false,

  // Set to false if you want to completely disable any user-agent sniffing.
  // This may make the headers less compatible but it will be much faster.
  // This defaults to `true`.
  browserSniff: true
}))

// Routes
routes(server)

// Running the server
server.listen(3000 || process.env.PORT, () => console.log('Server up and running ' + '<%= props.name %>'))
